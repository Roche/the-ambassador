package com.filipowm.ambassador.storage

import com.tngtech.archunit.junit.AnalyzeClasses
import com.tngtech.archunit.junit.ArchTest
import com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes
import com.tngtech.archunit.lang.syntax.ArchRuleDefinition.fields
import com.tngtech.archunit.lang.syntax.elements.GivenFieldsConjunction
import java.util.*
import javax.persistence.*

@AnalyzeClasses(packages = ["com.filipowm.ambassador.storage"])
class EntityArchitectureTest {

    @ArchTest
    private val `enums should be stored as strings` = entityFields()
        .and().haveRawType(Enum::class.java)
        .should().beAnnotatedWith(Enumerated::class.java)

    @ArchTest
    private val `identifiers should be autogenerated` = entityFields()
        .and().haveRawType(UUID::class.java)
        .and().areAnnotatedWith(Id::class.java)
        .should()
        .beAnnotatedWith(GeneratedValue::class.java)

    @ArchTest
    private val `entity class should have table and entity annotations` = classes()
        .that().areAnnotatedWith(Table::class.java).or().areAnnotatedWith(Entity::class.java)
        .should().beAnnotatedWith(Entity::class.java).andShould().beAnnotatedWith(Table::class.java)

    private fun entityFields(): GivenFieldsConjunction = fields()
        .that()
        .areDeclaredInClassesThat().areAnnotatedWith(Entity::class.java)

}