apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "indexer.fullname" . }}
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "indexer.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels: {{- include "indexer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels: {{- include "indexer.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "indexer.serviceAccountName" . }}
      volumes:
        - name: config
          configMap:
            name: {{ include "indexer.fullname" . }}
        - name: db-secrets
          secret:
            secretName: db-{{ include "indexer.fullname" . }}
            items:
              - key: application-database.yml
                path: application-database.yml
        {{- if .Values.sourcesSecret }}
        - name: source-secrets
          secret:
            secretName: {{ .Values.sourcesSecret }}
            items:
              - key: source
                path: application-source.yml
        {{- end }}
        {{- if .Values.global.postgresql.tlsSecret }}
        - name: postgres-tls-volume
          emptyDir:
            sizeLimit: "20k"
        - name: postgresql-tls
          secret:
            secretName: {{ .Values.global.postgresql.tlsSecret }}
            defaultMode: 0400
        {{- end }}
      initContainers:
      {{- if .Values.global.postgresql.tlsSecret }}
        - name: postgres-tls-ownership
          image: alpine:3.6
          command: ["sh", "-c", "cp /root/.postgresql/* /home/cnb/.postgresql && chmod 0400 /home/cnb/.postgresql/* && chown -R 1000:1000 /home/cnb/.postgresql"]
          volumeMounts:
            - mountPath: /home/cnb/.postgresql
              name: postgres-tls-volume
            - mountPath: /root/.postgresql/postgresql.pk8
              subPath: privateKey
              name: postgresql-tls
            - mountPath: /root/.postgresql/postgresql.crt
              subPath: cert
              name: postgresql-tls
            - mountPath: /root/.postgresql/root.crt
              subPath: serverCACert
              name: postgresql-tls
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SPRING_CONFIG_ADDITIONAL_LOCATION
              value: file:///config/,file:///secrets/
            - name: SPRING_PROFILES_ACTIVE
              value: database,source
          volumeMounts:
            - mountPath: /config/
              name: config
              readOnly: true
            - mountPath: /secrets/application-database.yml
              subPath: application-database.yml
              name: db-secrets
              readOnly: true
            {{- if .Values.sourcesSecret }}
            - mountPath: /secrets/application-source.yml
              subPath: application-source.yml
              name: source-secrets
              readOnly: true
            {{- end }}
            {{- if .Values.global.postgresql.tlsSecret }}
            - mountPath: /home/cnb/.postgresql
              name: postgres-tls-volume
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            httpGet:
              path: /actuator/health/startup
              port: http
          livenessProbe:
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources: {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
